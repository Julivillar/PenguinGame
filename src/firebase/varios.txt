gcloud run deploy deck-api-service --image us-central1-docker.pkg.dev/penguingame-546a8/deck-api-repo/my-api:latest --platform managed --region us-central1 --allow-unauthenticated --set-env-vars DJANGO_DEBUG=False,DJANGO_SECRET_KEY='X1dzXcV-NUAM91K828-44',DJANGO_ALLOWED_HOSTS='*',CORS_ALLOWED_ORIGINS='https://expo.dev'
gcloud run deploy deck-api-service --image us-central1-docker.pkg.dev/penguingame-546a8/deck-api-repo/my-api:latest --platform managed --region us-central1 --allow-unauthenticated --set-env-vars DJANGO_DEBUG=False,DJANGO_SECRET_KEY=X1dzXcV-NUAM91K828-44,DJANGO_ALLOWED_HOSTS=*,CORS_ALLOWED_ORIGINS=https://expo.dev

gcloud run deploy deck-api-service --image us-central1-docker.pkg.dev/penguingame-546a8/deck-api-repo/my-api:latest --platform managed --region us-central1 --allow-unauthenticated --set-env-vars DJANGO_DEBUG=False,DJANGO_SECRET_KEY=X1dzXcV-NUAM91K828-44,DJANGO_ALLOWED_HOSTS=deck-api-service-717787752348.us-central1.run.app,CORS_ALLOWED_ORIGINS=https://expo.dev

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    //–– User profiles ––  
    // Each player has a /users/{uid} document.
    // They can only read/write their own document.
    match /users/{uid} {
      allow read, write: if request.auth != null
                         && request.auth.uid == uid;
    }

    //–– Games ––  
    // Each match lives at /games/{gameId}.
    //   • Anyone signed-in can list and read waiting/playing games.
    //   • Only the host may create the document.
    //   • Only a joined player may update the player array or turnIndex.
    //   • No client-side deletes allowed.
    match /games/{gameId} {
      // Read for lobby & in-game state
      allow get, list: if request.auth != null;

      // Create: only the host may set up a new match
      //   Validate that request.resource.data.hostId == your UID
      allow create: if request.auth != null
                    && request.auth.uid == request.resource.data.hostId
                    // you can also require fields exist and have correct types:
                    && request.resource.data.players is list
                    && request.resource.data.turnIndex is int
                    && request.resource.data.status in ['waiting','playing','finished'];

      // Update: only a player already in the match may change game state
      allow update: if request.auth != null
                    // Grab the existing players array and map to their IDs
                    && request.auth.uid in resource.data.players
                        .map(player => player.id)
                    // Optionally: prevent clients from changing hostId or alias:
                    && request.resource.data.hostId == resource.data.hostId
                    && request.resource.data.alias == resource.data.alias;

      // Prevent client delete entirely
      allow delete: if false;
    }

    //–– Optional: other collections ––  
    // If you add /decks or /history, secure them similarly:
    //   match /decks/{id} { … }
    //   match /history/{id} { … }
  }
}
